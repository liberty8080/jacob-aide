package com.jacob.common.util;

import com.alibaba.fastjson.JSONObject;
import org.junit.jupiter.api.Test;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.Period;
import java.util.Base64;
import java.util.List;

public class Base64Test {
    String s = "";

    @Test
    public void base64Decode() {

        byte[] bytes = Base64.getDecoder().decode(s);
        String decodedStr = new String(bytes, StandardCharsets.UTF_8);
        String[] vmess = decodedStr.split("\n");
        for (String v : vmess) {
            var tmp = v.replace("vmess://","");
            byte[] bytes1 = Base64.getDecoder().decode(tmp);
            var tmp2 = new String(bytes1,StandardCharsets.UTF_8);
            JSONObject object = JSONObject.parseObject(tmp2);
            String ps = object.getString("ps");
            if(ps.contains("过期时间")){
                ps = ps.replace("过期时间：","");
                LocalDate now = LocalDate.now();
                LocalDate expire = LocalDate.parse(ps);
                Period period = Period.between(now,expire);
                System.out.println(period.getDays());
            }
            System.out.println(ps);
        }
    }
}
